{"version":3,"sources":["../src/utils/errors.ts","../src/utils/plugin.ts","../src/core/types.ts","../src/core/plugin-manifest.ts","../src/core/plugin-executor.ts","../src/templates/index.ts"],"names":[],"mappings":"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","file":"index.cjs","sourcesContent":["/**\n * Error codes for plugin operations\n * @public\n */\nexport const ErrorCode = {\n  INVALID_DATA: 'INVALID_DATA',\n  UNSUPPORTED_FILE_TYPE: 'UNSUPPORTED_FILE_TYPE',\n  MISSING_REQUIRED_COLUMNS: 'MISSING_REQUIRED_COLUMNS',\n  ANALYSIS_FAILED: 'ANALYSIS_FAILED',\n} as const;\n\nexport type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];\n\n/**\n * Custom error class for plugin operations\n * @public\n */\nexport class PluginError extends Error {\n  constructor(\n    message: string,\n    public code: ErrorCode,\n    public details?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'PluginError';\n  }\n}\n","import { DataSet, FileType } from '@/core/types';\nimport { ErrorCode, PluginError } from './errors';\n\n/**\n * Validates a dataset before analysis\n * @param data - Dataset to validate\n * @param supportedTypes - Supported file types\n * @throws {PluginError} When validation fails\n * @public\n */\nexport function validateDataSet(data: DataSet, supportedTypes: FileType[]): void {\n  if (!data?.columns?.length || !data?.rows?.length) {\n    throw new PluginError('Dataset must contain columns and rows', ErrorCode.INVALID_DATA);\n  }\n\n  if (!supportedTypes.includes(data.fileType)) {\n    throw new PluginError(\n      `Unsupported file type: ${data.fileType}`,\n      ErrorCode.UNSUPPORTED_FILE_TYPE\n    );\n  }\n}\n\n/**\n * Utility functions for data analysis\n * @public\n */\nexport const utils = {\n  /**\n   * Check if a value is numeric\n   */\n  isNumeric(value: unknown): boolean {\n    if (typeof value === 'number') return true;\n    if (typeof value === 'string') {\n      return !isNaN(Number(value)) && value.trim() !== '';\n    }\n    return false;\n  },\n\n  /**\n   * Convert value to number\n   */\n  toNumber(value: unknown): number {\n    if (typeof value === 'number') return value;\n    return Number(value);\n  },\n\n  /**\n   * Calculate mean of values\n   */\n  calculateMean(values: number[]): number {\n    if (!values.length) return 0;\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  },\n\n  /**\n   * Get numeric columns from dataset\n   */\n  getNumericColumns(data: DataSet) {\n    return data.columns.filter((col) => {\n      const sampleValue = data.rows[0]?.[col.id];\n      return this.isNumeric(sampleValue);\n    });\n  },\n};\n","import { JSX } from 'react';\n\n/**\n * Supported file types for analysis\n * @public\n */\nexport const FileType = {\n  CSV: 'csv',\n  XLSX: 'xlsx',\n  JSON: 'json',\n} as const;\n\nexport type FileType = (typeof FileType)[keyof typeof FileType];\n\n/**\n * Column data type definitions\n * @public\n */\nexport const ColumnType = {\n  STRING: 'string',\n  NUMBER: 'number',\n  BOOLEAN: 'boolean',\n  DATE: 'date',\n} as const;\n\nexport type ColumnType = (typeof ColumnType)[keyof typeof ColumnType];\n\n/**\n * Column definition\n * @public\n */\nexport interface Column {\n  /** Unique identifier for the column */\n  id: string;\n  /** Display name of the column */\n  name: string;\n  /** Data type of the column */\n  type: ColumnType;\n  /** Additional metadata about the column */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Dataset structure for analysis\n * @public\n */\nexport interface DataSet {\n  /** Array of column definitions */\n  columns: Column[];\n  /** Array of data rows */\n  rows: Record<string, unknown>[];\n  /** Total number of rows in the dataset */\n  totalRows: number;\n  /** Total number of columns in the dataset */\n  totalColumns: number;\n  /** Type of file the data came from */\n  fileType: FileType;\n  /** Additional metadata about the dataset */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Analysis result structure\n * @public\n */\nexport interface AnalysisResult {\n  /** Analysis output data */\n  data: Record<string, unknown>;\n  /** Metadata about the analysis */\n  metadata?: {\n    /** Time taken to execute analysis in ms */\n    executionTime?: number;\n    /** Number of rows processed */\n    processedRows?: number;\n    /** Names of columns that were processed */\n    processedColumns?: string[];\n  };\n}\n\n/**\n * Props passed to plugin's UI component\n * @public\n */\nexport interface PluginComponentProps {\n  /** Analysis results to display */\n  result: AnalysisResult;\n  /** Dataset that was analyzed */\n  data: DataSet;\n  /** Callback when component should close */\n  onClose?: () => void;\n  /** Optional className for styling */\n  className?: string;\n}\n\n/**\n * Core plugin interface\n * @public\n */\nexport interface TensrPlugin {\n  /** Analyze the provided dataset */\n  analyze(data: DataSet): Promise<AnalysisResult> | AnalysisResult;\n  /** React component to display results */\n  Component(props: PluginComponentProps): JSX.Element;\n}\n","import { DataSet, AnalysisResult } from './types';\n\n/**\n * Plugin manifest structure for Tensr plugins\n * @public\n */\nexport interface TensrPluginManifest {\n  /** Unique plugin identifier */\n  id: string;\n  /** Plugin name */\n  name: string;\n  /** Plugin version */\n  version: string;\n  /** Plugin description */\n  description: string;\n  /** Plugin author */\n  author: string;\n  /** Author email */\n  authorEmail?: string;\n  /** Plugin entry point file */\n  entryPoint: string;\n  /** UI file path */\n  ui: string;\n  /** Plugin capabilities */\n  capabilities: {\n    /** Supported input data types */\n    inputTypes: string[];\n    /** Supported output formats */\n    outputTypes: string[];\n  };\n  /** Plugin configuration */\n  config?: {\n    /** Execution timeout in seconds */\n    timeout?: number;\n    /** Maximum memory usage in MB */\n    maxMemory?: number;\n    /** Maximum concurrency */\n    concurrency?: number;\n  };\n  /** Plugin tags for categorization */\n  tags?: string[];\n  /** Plugin icon URL */\n  icon?: string;\n  /** Plugin license */\n  license?: string;\n  /** Plugin homepage URL */\n  homepage?: string;\n  /** Plugin repository URL */\n  repository?: string;\n}\n\n/**\n * Plugin execution context\n * @public\n */\nexport interface PluginExecutionContext {\n  /** Input dataset */\n  data: DataSet;\n  /** UI parameters from user */\n  uiData: Record<string, unknown>;\n  /** Plugin manifest */\n  manifest: TensrPluginManifest;\n  /** Result callback */\n  setResult: (result: AnalysisResult) => void;\n  /** Error callback */\n  setError: (error: Error) => void;\n}\n\n/**\n * Plugin execution result\n * @public\n */\nexport interface PluginExecutionResult {\n  /** Analysis result */\n  result: AnalysisResult;\n  /** Execution metadata */\n  metadata: {\n    executionTime: number;\n    memoryUsed: number;\n    warnings?: string[];\n  };\n}\n\n/**\n * Plugin validation result\n * @public\n */\nexport interface PluginValidationResult {\n  /** Whether plugin is valid */\n  isValid: boolean;\n  /** Validation errors */\n  errors: string[];\n  /** Validation warnings */\n  warnings: string[];\n}\n\n/**\n * Validate a plugin manifest\n * @public\n */\nexport function validatePluginManifest(manifest: TensrPluginManifest): PluginValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Required fields validation\n  if (!manifest.id || manifest.id.trim() === '') {\n    errors.push('Plugin ID cannot be empty');\n  }\n\n  if (!manifest.name || manifest.name.trim() === '') {\n    errors.push('Plugin name cannot be empty');\n  }\n\n  if (!manifest.version || manifest.version.trim() === '') {\n    errors.push('Plugin version cannot be empty');\n  } else if (!/^\\d+\\.\\d+\\.\\d+/.test(manifest.version)) {\n    errors.push(`Invalid version format: ${manifest.version}`);\n  }\n\n  if (!manifest.description || manifest.description.trim() === '') {\n    errors.push('Plugin description cannot be empty');\n  }\n\n  if (!manifest.author || manifest.author.trim() === '') {\n    errors.push('Plugin author cannot be empty');\n  }\n\n  if (!manifest.entryPoint || manifest.entryPoint.trim() === '') {\n    errors.push('Plugin entry point cannot be empty');\n  }\n\n  if (!manifest.ui || manifest.ui.trim() === '') {\n    errors.push('Plugin UI file cannot be empty');\n  }\n\n  // Capabilities validation\n  if (!manifest.capabilities) {\n    errors.push('Plugin capabilities are required');\n  } else {\n    if (!manifest.capabilities.inputTypes || manifest.capabilities.inputTypes.length === 0) {\n      errors.push('At least one input type is required');\n    }\n\n    if (!manifest.capabilities.outputTypes || manifest.capabilities.outputTypes.length === 0) {\n      errors.push('At least one output type is required');\n    }\n  }\n\n  // Tags validation\n  if (!manifest.tags || manifest.tags.length === 0) {\n    warnings.push('Consider adding tags for better discoverability');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n","import { DataSet, AnalysisResult, TensrPlugin } from './types';\nimport { \n  TensrPluginManifest, \n  PluginValidationResult\n} from './plugin-manifest';\n\n/**\n * Plugin executor for running Tensr plugins in a sandboxed environment\n * @public\n */\nexport class PluginExecutor {\n  private result: AnalysisResult | null = null;\n  private error: Error | null = null;\n  private startTime: number = 0;\n\n  /**\n   * Execute a plugin with given data and UI parameters\n   */\n  async executePlugin(\n    plugin: TensrPlugin,\n    _manifest: TensrPluginManifest,\n    data: DataSet,\n    _uiData: Record<string, unknown> = {},\n    timeoutMs: number = 30000\n  ): Promise<{ success: boolean; result?: AnalysisResult; error?: Error; executionTime: number }> {\n    this.startTime = Date.now();\n    this.result = null;\n    this.error = null;\n\n    try {\n      // Create timeout promise\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Plugin execution timeout')), timeoutMs);\n      });\n\n      // Execute plugin analysis with timeout\n      const analysisResult = await Promise.race([\n        plugin.analyze(data),\n        timeoutPromise\n      ]);\n      \n      // Set result if not already set\n      if (!this.result) {\n        this.result = analysisResult;\n      }\n\n      const executionTime = Date.now() - this.startTime;\n\n      return {\n        success: true,\n        result: this.result,\n        executionTime\n      };\n    } catch (error) {\n      const executionTime = Date.now() - this.startTime;\n      this.error = error instanceof Error ? error : new Error('Unknown error');\n      \n      return {\n        success: false,\n        error: this.error,\n        executionTime\n      };\n    }\n  }\n\n  /**\n   * Validate a plugin manifest\n   */\n  validateManifest(manifest: TensrPluginManifest): PluginValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields validation\n    if (!manifest.id) errors.push('Plugin ID is required');\n    if (!manifest.name) errors.push('Plugin name is required');\n    if (!manifest.version) errors.push('Plugin version is required');\n    if (!manifest.description) errors.push('Plugin description is required');\n    if (!manifest.author) errors.push('Plugin author is required');\n    if (!manifest.entryPoint) errors.push('Plugin entry point is required');\n    if (!manifest.ui) errors.push('Plugin UI file is required');\n\n    // Capabilities validation\n    if (!manifest.capabilities) {\n      errors.push('Plugin capabilities are required');\n    } else {\n      if (!manifest.capabilities.inputTypes || manifest.capabilities.inputTypes.length === 0) {\n        errors.push('Plugin must specify at least one input type');\n      }\n      if (!manifest.capabilities.outputTypes || manifest.capabilities.outputTypes.length === 0) {\n        errors.push('Plugin must specify at least one output type');\n      }\n    }\n\n    // Version format validation\n    if (manifest.version && !/^\\d+\\.\\d+\\.\\d+/.test(manifest.version)) {\n      warnings.push('Version should follow semantic versioning (e.g., 1.0.0)');\n    }\n\n    // Configuration validation\n    if (manifest.config) {\n      if (manifest.config.timeout && manifest.config.timeout < 1) {\n        warnings.push('Timeout should be at least 1 second');\n      }\n      if (manifest.config.maxMemory && manifest.config.maxMemory < 10) {\n        warnings.push('Max memory should be at least 10MB');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n}\n\n/**\n * Create a plugin from manifest and code\n * @public\n */\nexport function createPlugin(\n  _manifest: TensrPluginManifest,\n  pluginCode: string\n): TensrPlugin {\n  try {\n    // Remove export statements and create a function that returns the plugin\n    const cleanCode = pluginCode\n      .replace(/export\\s+/g, '')\n      .replace(/const\\s+(\\w+)\\s*=/g, 'var $1 =')\n      .replace(/let\\s+(\\w+)\\s*=/g, 'var $1 =')\n      .replace(/async\\s+function/g, 'function');\n\n    // Create a function that returns the plugin\n    const pluginFactory = new Function(`\n      ${cleanCode}\n      // Return the first defined plugin variable\n      if (typeof TestPlugin !== 'undefined') return TestPlugin;\n      if (typeof ErrorPlugin !== 'undefined') return ErrorPlugin;\n      if (typeof plugin !== 'undefined') return plugin;\n      throw new Error('No plugin found in code');\n    `);\n\n    // Execute the plugin code\n    const plugin = pluginFactory();\n\n    if (!plugin || typeof plugin.analyze !== 'function') {\n      throw new Error('Plugin must export an object with analyze method');\n    }\n\n    return plugin;\n  } catch (error) {\n    throw new Error(`Failed to create plugin: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n","import { TensrPluginManifest } from '../core/plugin-manifest';\n\n/**\n * Plugin template for basic statistical analysis\n * @public\n */\nexport const basicStatsTemplate: TensrPluginManifest = {\n  id: 'basic-stats-template',\n  name: 'Basic Statistics',\n  version: '1.0.0',\n  description: 'Calculate basic descriptive statistics for numeric data',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx'],\n    outputTypes: ['table', 'chart']\n  },\n  config: {\n    timeout: 30,\n    maxMemory: 100\n  },\n  tags: ['statistics', 'descriptive', 'basic']\n};\n\n/**\n * Plugin template for correlation analysis\n * @public\n */\nexport const correlationTemplate: TensrPluginManifest = {\n  id: 'correlation-template',\n  name: 'Correlation Analysis',\n  version: '1.0.0',\n  description: 'Calculate correlation coefficients between numeric variables',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx'],\n    outputTypes: ['table', 'chart']\n  },\n  config: {\n    timeout: 60,\n    maxMemory: 200\n  },\n  tags: ['statistics', 'correlation', 'analysis']\n};\n\n/**\n * Plugin template for data visualization\n * @public\n */\nexport const visualizationTemplate: TensrPluginManifest = {\n  id: 'visualization-template',\n  name: 'Data Visualization',\n  version: '1.0.0',\n  description: 'Create charts and graphs from your data',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx', 'json'],\n    outputTypes: ['chart', 'image']\n  },\n  config: {\n    timeout: 45,\n    maxMemory: 150\n  },\n  tags: ['visualization', 'charts', 'graphs']\n};\n\n/**\n * Get all available plugin templates\n * @public\n */\nexport function getPluginTemplates(): TensrPluginManifest[] {\n  return [\n    basicStatsTemplate,\n    correlationTemplate,\n    visualizationTemplate\n  ];\n}\n\n/**\n * Get plugin template by ID\n * @public\n */\nexport function getPluginTemplate(id: string): TensrPluginManifest | undefined {\n  return getPluginTemplates().find(template => template.id === id);\n}\n"]}