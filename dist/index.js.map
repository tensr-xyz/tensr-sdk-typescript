{"version":3,"sources":["../src/utils/errors.ts","../src/utils/plugin.ts","../src/core/types.ts","../src/core/plugin-executor.ts","../src/templates/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Error codes for plugin operations\n * @public\n */\nexport const ErrorCode = {\n  INVALID_DATA: 'INVALID_DATA',\n  UNSUPPORTED_FILE_TYPE: 'UNSUPPORTED_FILE_TYPE',\n  MISSING_REQUIRED_COLUMNS: 'MISSING_REQUIRED_COLUMNS',\n  ANALYSIS_FAILED: 'ANALYSIS_FAILED',\n} as const;\n\nexport type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];\n\n/**\n * Custom error class for plugin operations\n * @public\n */\nexport class PluginError extends Error {\n  constructor(\n    message: string,\n    public code: ErrorCode,\n    public details?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'PluginError';\n  }\n}\n","import { DataSet, FileType } from '@/core/types';\nimport { ErrorCode, PluginError } from './errors';\n\n/**\n * Validates a dataset before analysis\n * @param data - Dataset to validate\n * @param supportedTypes - Supported file types\n * @throws {PluginError} When validation fails\n * @public\n */\nexport function validateDataSet(data: DataSet, supportedTypes: FileType[]): void {\n  if (!data?.columns?.length || !data?.rows?.length) {\n    throw new PluginError('Dataset must contain columns and rows', ErrorCode.INVALID_DATA);\n  }\n\n  if (!supportedTypes.includes(data.fileType)) {\n    throw new PluginError(\n      `Unsupported file type: ${data.fileType}`,\n      ErrorCode.UNSUPPORTED_FILE_TYPE\n    );\n  }\n}\n\n/**\n * Utility functions for data analysis\n * @public\n */\nexport const utils = {\n  /**\n   * Check if a value is numeric\n   */\n  isNumeric(value: unknown): boolean {\n    if (typeof value === 'number') return true;\n    if (typeof value === 'string') {\n      return !isNaN(Number(value)) && value.trim() !== '';\n    }\n    return false;\n  },\n\n  /**\n   * Convert value to number\n   */\n  toNumber(value: unknown): number {\n    if (typeof value === 'number') return value;\n    return Number(value);\n  },\n\n  /**\n   * Calculate mean of values\n   */\n  calculateMean(values: number[]): number {\n    if (!values.length) return 0;\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  },\n\n  /**\n   * Get numeric columns from dataset\n   */\n  getNumericColumns(data: DataSet) {\n    return data.columns.filter((col) => {\n      const sampleValue = data.rows[0]?.[col.id];\n      return this.isNumeric(sampleValue);\n    });\n  },\n};\n","import { JSX } from 'react';\n\n/**\n * Supported file types for analysis\n * @public\n */\nexport const FileType = {\n  CSV: 'csv',\n  XLSX: 'xlsx',\n  JSON: 'json',\n} as const;\n\nexport type FileType = (typeof FileType)[keyof typeof FileType];\n\n/**\n * Column data type definitions\n * @public\n */\nexport const ColumnType = {\n  STRING: 'string',\n  NUMBER: 'number',\n  BOOLEAN: 'boolean',\n  DATE: 'date',\n} as const;\n\nexport type ColumnType = (typeof ColumnType)[keyof typeof ColumnType];\n\n/**\n * Column definition\n * @public\n */\nexport interface Column {\n  /** Unique identifier for the column */\n  id: string;\n  /** Display name of the column */\n  name: string;\n  /** Data type of the column */\n  type: ColumnType;\n  /** Additional metadata about the column */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Dataset structure for analysis\n * @public\n */\nexport interface DataSet {\n  /** Array of column definitions */\n  columns: Column[];\n  /** Array of data rows */\n  rows: Record<string, unknown>[];\n  /** Total number of rows in the dataset */\n  totalRows: number;\n  /** Total number of columns in the dataset */\n  totalColumns: number;\n  /** Type of file the data came from */\n  fileType: FileType;\n  /** Additional metadata about the dataset */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Analysis result structure\n * @public\n */\nexport interface AnalysisResult {\n  /** Analysis output data */\n  data: Record<string, unknown>;\n  /** Metadata about the analysis */\n  metadata?: {\n    /** Time taken to execute analysis in ms */\n    executionTime?: number;\n    /** Number of rows processed */\n    processedRows?: number;\n    /** Names of columns that were processed */\n    processedColumns?: string[];\n  };\n}\n\n/**\n * Props passed to plugin's UI component\n * @public\n */\nexport interface PluginComponentProps {\n  /** Analysis results to display */\n  result: AnalysisResult;\n  /** Dataset that was analyzed */\n  data: DataSet;\n  /** Callback when component should close */\n  onClose?: () => void;\n  /** Optional className for styling */\n  className?: string;\n}\n\n/**\n * Core plugin interface\n * @public\n */\nexport interface TensrPlugin {\n  /** Analyze the provided dataset */\n  analyze(data: DataSet): Promise<AnalysisResult> | AnalysisResult;\n  /** React component to display results */\n  Component(props: PluginComponentProps): JSX.Element;\n}\n","import { DataSet, AnalysisResult, TensrPlugin } from './types';\nimport { \n  TensrPluginManifest, \n  PluginExecutionResult,\n  PluginValidationResult\n} from './plugin-manifest';\n\n/**\n * Plugin executor for running Tensr plugins in a sandboxed environment\n * @public\n */\nexport class PluginExecutor {\n  private result: AnalysisResult | null = null;\n  private error: Error | null = null;\n  private startTime: number = 0;\n\n  /**\n   * Execute a plugin with given data and UI parameters\n   */\n  async executePlugin(\n    plugin: TensrPlugin,\n    _manifest: TensrPluginManifest,\n    data: DataSet,\n    _uiData: Record<string, unknown> = {}\n  ): Promise<PluginExecutionResult> {\n    this.startTime = Date.now();\n    this.result = null;\n    this.error = null;\n\n    try {\n      // Note: Execution context will be available for future plugin features\n\n      // Execute plugin analysis\n      const analysisResult = await plugin.analyze(data);\n      \n      // Set result if not already set\n      if (!this.result) {\n        this.result = analysisResult;\n      }\n\n      const executionTime = Date.now() - this.startTime;\n\n      return {\n        result: this.result,\n        metadata: {\n          executionTime,\n          memoryUsed: this.getMemoryUsage(),\n          warnings: this.getWarnings()\n        }\n      };\n    } catch (error) {\n      throw new Error(`Plugin execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Validate a plugin manifest\n   */\n  validateManifest(manifest: TensrPluginManifest): PluginValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields validation\n    if (!manifest.id) errors.push('Plugin ID is required');\n    if (!manifest.name) errors.push('Plugin name is required');\n    if (!manifest.version) errors.push('Plugin version is required');\n    if (!manifest.description) errors.push('Plugin description is required');\n    if (!manifest.author) errors.push('Plugin author is required');\n    if (!manifest.entryPoint) errors.push('Plugin entry point is required');\n    if (!manifest.ui) errors.push('Plugin UI file is required');\n\n    // Capabilities validation\n    if (!manifest.capabilities) {\n      errors.push('Plugin capabilities are required');\n    } else {\n      if (!manifest.capabilities.inputTypes || manifest.capabilities.inputTypes.length === 0) {\n        errors.push('Plugin must specify at least one input type');\n      }\n      if (!manifest.capabilities.outputTypes || manifest.capabilities.outputTypes.length === 0) {\n        errors.push('Plugin must specify at least one output type');\n      }\n    }\n\n    // Version format validation\n    if (manifest.version && !/^\\d+\\.\\d+\\.\\d+/.test(manifest.version)) {\n      warnings.push('Version should follow semantic versioning (e.g., 1.0.0)');\n    }\n\n    // Configuration validation\n    if (manifest.config) {\n      if (manifest.config.timeout && manifest.config.timeout < 1) {\n        warnings.push('Timeout should be at least 1 second');\n      }\n      if (manifest.config.maxMemory && manifest.config.maxMemory < 10) {\n        warnings.push('Max memory should be at least 10MB');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Get memory usage (placeholder implementation)\n   */\n  private getMemoryUsage(): number {\n    // In a real implementation, this would measure actual memory usage\n    return 0;\n  }\n\n  /**\n   * Get execution warnings\n   */\n  private getWarnings(): string[] {\n    const warnings: string[] = [];\n    \n    if (this.error) {\n      warnings.push(`Plugin execution completed with errors: ${this.error.message}`);\n    }\n\n    return warnings;\n  }\n}\n\n/**\n * Create a plugin from manifest and code\n * @public\n */\nexport function createPlugin(\n  _manifest: TensrPluginManifest,\n  pluginCode: string\n): TensrPlugin {\n  try {\n    // Create a function that returns the plugin\n    const pluginFactory = new Function('TensrSDK', `\n      ${pluginCode}\n      return plugin;\n    `);\n\n    // Execute the plugin code with SDK context\n    const plugin = pluginFactory({\n      // Add other SDK exports here\n    });\n\n    if (!plugin || typeof plugin.analyze !== 'function' || typeof plugin.Component !== 'function') {\n      throw new Error('Plugin must export an object with analyze and Component methods');\n    }\n\n    return plugin;\n  } catch (error) {\n    throw new Error(`Failed to create plugin: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n","import { TensrPluginManifest } from '../core/plugin-manifest';\n\n/**\n * Plugin template for basic statistical analysis\n * @public\n */\nexport const basicStatsTemplate: TensrPluginManifest = {\n  id: 'basic-stats-template',\n  name: 'Basic Statistics',\n  version: '1.0.0',\n  description: 'Calculate basic descriptive statistics for numeric data',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx'],\n    outputTypes: ['table', 'chart']\n  },\n  config: {\n    timeout: 30,\n    maxMemory: 100\n  },\n  tags: ['statistics', 'descriptive', 'basic']\n};\n\n/**\n * Plugin template for correlation analysis\n * @public\n */\nexport const correlationTemplate: TensrPluginManifest = {\n  id: 'correlation-template',\n  name: 'Correlation Analysis',\n  version: '1.0.0',\n  description: 'Calculate correlation coefficients between numeric variables',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx'],\n    outputTypes: ['table', 'chart']\n  },\n  config: {\n    timeout: 60,\n    maxMemory: 200\n  },\n  tags: ['statistics', 'correlation', 'analysis']\n};\n\n/**\n * Plugin template for data visualization\n * @public\n */\nexport const visualizationTemplate: TensrPluginManifest = {\n  id: 'visualization-template',\n  name: 'Data Visualization',\n  version: '1.0.0',\n  description: 'Create charts and graphs from your data',\n  author: 'Tensr',\n  entryPoint: 'dist/index.js',\n  ui: 'ui.html',\n  capabilities: {\n    inputTypes: ['csv', 'xlsx', 'json'],\n    outputTypes: ['chart', 'image']\n  },\n  config: {\n    timeout: 45,\n    maxMemory: 150\n  },\n  tags: ['visualization', 'charts', 'graphs']\n};\n\n/**\n * Get all available plugin templates\n * @public\n */\nexport function getPluginTemplates(): TensrPluginManifest[] {\n  return [\n    basicStatsTemplate,\n    correlationTemplate,\n    visualizationTemplate\n  ];\n}\n\n/**\n * Get plugin template by ID\n * @public\n */\nexport function getPluginTemplate(id: string): TensrPluginManifest | undefined {\n  return getPluginTemplates().find(template => template.id === id);\n}\n"]}