{"version":3,"sources":["../src/utils/errors.ts","../src/utils/plugin.ts","../src/core/types.ts","../src/core/plugin.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Error codes for plugin operations\n * @public\n */\nexport const ErrorCode = {\n    INVALID_DATA: 'INVALID_DATA',\n    UNSUPPORTED_FILE_TYPE: 'UNSUPPORTED_FILE_TYPE',\n    MISSING_REQUIRED_COLUMNS: 'MISSING_REQUIRED_COLUMNS',\n    ANALYSIS_FAILED: 'ANALYSIS_FAILED',\n} as const;\n\nexport type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];\n\n/**\n * Custom error class for plugin operations\n * @public\n */\nexport class PluginError extends Error {\n    constructor(\n        message: string,\n        public code: ErrorCode,\n        public details?: Record<string, unknown>\n    ) {\n        super(message);\n        this.name = 'PluginError';\n    }\n}\n","import { DataSet, FileType } from '@/core/types';\nimport {ErrorCode, PluginError} from './errors';\n\n/**\n * Validates a dataset before analysis\n * @param data - Dataset to validate\n * @param supportedTypes - Supported file types\n * @throws {PluginError} When validation fails\n * @public\n */\nexport function validateDataSet(data: DataSet, supportedTypes: FileType[]): void {\n    if (!data?.columns?.length || !data?.rows?.length) {\n        throw new PluginError('Dataset must contain columns and rows', ErrorCode.INVALID_DATA);\n    }\n\n    if (!supportedTypes.includes(data.fileType)) {\n        throw new PluginError(\n            `Unsupported file type: ${data.fileType}`,\n            ErrorCode.UNSUPPORTED_FILE_TYPE\n        );\n    }\n}\n\n/**\n * Utility functions for data analysis\n * @public\n */\nexport const utils = {\n    /**\n     * Check if a value is numeric\n     */\n    isNumeric(value: unknown): boolean {\n        if (typeof value === 'number') return true;\n        if (typeof value === 'string') {\n            return !isNaN(Number(value)) && value.trim() !== '';\n        }\n        return false;\n    },\n\n    /**\n     * Convert value to number\n     */\n    toNumber(value: unknown): number {\n        if (typeof value === 'number') return value;\n        return Number(value);\n    },\n\n    /**\n     * Calculate mean of values\n     */\n    calculateMean(values: number[]): number {\n        if (!values.length) return 0;\n        return values.reduce((a, b) => a + b, 0) / values.length;\n    },\n\n    /**\n     * Get numeric columns from dataset\n     */\n    getNumericColumns(data: DataSet) {\n        return data.columns.filter(col => {\n            const sampleValue = data.rows[0]?.[col.id];\n            return this.isNumeric(sampleValue);\n        });\n    }\n};\n","import { JSX } from 'react';\n\n/**\n * Supported file types for analysis\n * @public\n */\nexport const FileType = {\n  CSV: 'csv',\n  XLSX: 'xlsx',\n  JSON: 'json',\n} as const;\n\nexport type FileType = (typeof FileType)[keyof typeof FileType];\n\n/**\n * Column data type definitions\n * @public\n */\nexport const ColumnType = {\n  STRING: 'string',\n  NUMBER: 'number',\n  BOOLEAN: 'boolean',\n  DATE: 'date',\n} as const;\n\nexport type ColumnType = (typeof ColumnType)[keyof typeof ColumnType];\n\n/**\n * Column definition\n * @public\n */\nexport interface Column {\n  /** Unique identifier for the column */\n  id: string;\n  /** Display name of the column */\n  name: string;\n  /** Data type of the column */\n  type: ColumnType;\n  /** Additional metadata about the column */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Dataset structure for analysis\n * @public\n */\nexport interface DataSet {\n  /** Array of column definitions */\n  columns: Column[];\n  /** Array of data rows */\n  rows: Record<string, unknown>[];\n  /** Total number of rows in the dataset */\n  totalRows: number;\n  /** Total number of columns in the dataset */\n  totalColumns: number;\n  /** Type of file the data came from */\n  fileType: FileType;\n  /** Additional metadata about the dataset */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Analysis result structure\n * @public\n */\nexport interface AnalysisResult {\n  /** Analysis output data */\n  data: Record<string, unknown>;\n  /** Metadata about the analysis */\n  metadata?: {\n    /** Time taken to execute analysis in ms */\n    executionTime?: number;\n    /** Number of rows processed */\n    processedRows?: number;\n    /** Names of columns that were processed */\n    processedColumns?: string[];\n  };\n}\n\n/**\n * Props passed to plugin's UI component\n * @public\n */\nexport interface PluginComponentProps {\n  /** Analysis results to display */\n  result: AnalysisResult;\n  /** Dataset that was analyzed */\n  data: DataSet;\n  /** Callback when component should close */\n  onClose?: () => void;\n  /** Optional className for styling */\n  className?: string;\n}\n\n/**\n * Plugin category type\n * @public\n */\nexport type PluginCategory = 'analysis' | 'visualization' | 'export' | 'utility';\n\n/**\n * Core plugin interface\n * @public\n */\nexport interface TensrPlugin {\n  /** Analyze the provided dataset */\n  analyze(data: DataSet): Promise<AnalysisResult> | AnalysisResult;\n  /** React component to display results */\n  Component: (props: PluginComponentProps) => JSX.Element;\n  /** Get plugin name */\n  getName(): string;\n  /** Get plugin version */\n  getVersion(): string;\n  /** Get plugin description */\n  getDescription(): string;\n  /** Get supported file types */\n  getSupportedFileTypes(): FileType[];\n  /** Get plugin category if defined */\n  getCategory(): PluginCategory | null;\n  /** Get plugin tags */\n  getTags(): string[];\n}\n\n/**\n * Plugin configuration\n * @public\n */\nexport interface PluginConfig {\n  /** Plugin name */\n  name: string;\n  /** Plugin version */\n  version: string;\n  /** Plugin description */\n  description: string;\n  /** Supported file types */\n  supportedFileTypes: FileType[];\n  /** Plugin category */\n  category?: PluginCategory;\n  /** Search tags */\n  tags?: string[];\n}\n","// src/plugin.ts\nimport { PluginConfig, TensrPlugin, DataSet, PluginComponentProps } from './types';\nimport { validateDataSet } from '@/utils';\n\n/**\n * Creates a new plugin instance\n * @param config - Plugin configuration\n * @returns Plugin instance\n * @public\n */\nexport function createPlugin(config: PluginConfig): TensrPlugin {\n  return {\n    getName: () => config.name,\n    getVersion: () => config.version,\n    getDescription: () => config.description,\n    getSupportedFileTypes: () => config.supportedFileTypes,\n    getCategory: () => config.category || null,\n    getTags: () => config.tags || [],\n\n    analyze: function(data: DataSet) {\n      validateDataSet(data, config.supportedFileTypes);\n      throw new Error('analyze() must be implemented');\n    },\n\n    Component: function(_props: PluginComponentProps) {\n      throw new Error('Component() must be implemented');\n    }\n  };\n}\n"]}